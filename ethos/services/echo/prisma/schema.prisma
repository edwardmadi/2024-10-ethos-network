generator client {
  provider        = "prisma-client-js"
  // Make sure to generate Prisma client for Alpine correctly
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
  previewFeatures = ["metrics", "relationJoins", "views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id                 Int              @id
  archived           Boolean          @default(false)
  createdAt          DateTime
  updatedAt          DateTime         @updatedAt
  invitesSent        String[]
  invitesAcceptedIds Int[]
  invitesAvailable   Int
  invitedBy          Int
  ProfileEvent       ProfileEvent[]
  Vouch              Vouch[]
  ProfileAddress     ProfileAddress[]
  Attestation        Attestation[]
  SentInvitations    Invitation[]     @relation("sent")
  Invitation         Invitation[]
  Escrow             Escrow[]
  ReputationMarket   Market?

  @@index([archived])
  @@map("profiles")
}

model ProfileAddress {
  id        Int     @id @default(autoincrement())
  profileId Int
  profile   Profile @relation(fields: [profileId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  address   String  @unique

  @@index([profileId])
  @@map("profile_addresses")
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum Contract {
  PROFILE     @map("profile")
  VOUCH       @map("vouch")
  REVIEW      @map("review")
  ATTESTATION @map("attestation")
  DISCUSSION  @map("discussion")
}

model Invitation {
  id                Int              @id @default(autoincrement())
  senderProfileId   Int
  sender            Profile          @relation("sent", fields: [senderProfileId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  recipient         String           @db.VarChar(42)
  sentAt            DateTime
  acceptedProfileId Int?
  acceptedProfile   Profile?         @relation(fields: [acceptedProfileId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  status            InvitationStatus @default(PENDING)
  statusUpdatedAt   DateTime?

  @@index([senderProfileId])
  @@index([acceptedProfileId])
  @@index([recipient])
  @@map("invitations")
}

model Review {
  id              Int           @id
  archived        Boolean
  author          String        @db.VarChar(42)
  authorProfileId Int
  subject         String        @db.VarChar(42)
  score           Int
  comment         String
  metadata        String
  createdAt       DateTime
  updatedAt       DateTime      @updatedAt
  account         String
  service         String
  ReviewEvent     ReviewEvent[]

  @@index([service, account])
  @@index([archived])
  @@index([author])
  @@index([subject, score])
  @@map("reviews")
}

model Vouch {
  id               Int          @id
  archived         Boolean
  unhealthy        Boolean
  authorProfileId  Int
  stakeToken       String       @db.VarChar(42)
  subjectProfileId Int
  subjectProfile   Profile      @relation(fields: [subjectProfileId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  deposited        Decimal      @db.Decimal(78, 0)
  staked           Decimal      @db.Decimal(78, 0)
  balance          Decimal      @db.Decimal(78, 0)
  withdrawn        Decimal      @default(0) @db.Decimal(78, 0)
  mutualVouchId    Int?         @unique
  mutualVouch      Vouch?       @relation("mutualVouch", fields: [mutualVouchId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  mutualVouchRef   Vouch?       @relation("mutualVouch") // links to itself for mutual vouch lookups
  comment          String
  metadata         String
  vouchedAt        DateTime
  updatedAt        DateTime     @updatedAt
  unvouchedAt      DateTime?
  unhealthyAt      DateTime?
  VouchEvent       VouchEvent[]

  @@index([archived])
  @@index([authorProfileId])
  @@index([subjectProfileId])
  @@map("vouches")
}

model Reply {
  id                      Int          @id
  parentId                Int
  targetContract          String       @db.VarChar(42)
  authorProfileId         Int
  createdAt               DateTime
  updatedAt               DateTime     @updatedAt
  content                 String
  metadata                String
  parentIsOriginalComment Boolean
  contract                Contract?
  ReplyEvent              ReplyEvent[]

  @@index([targetContract, parentId])
  @@index([contract, parentId])
  @@map("replies")
}

model Vote {
  id             Int         @id
  isUpvote       Boolean
  isArchived     Boolean
  voter          Int
  targetContract String      @db.VarChar(42)
  targetId       Int
  createdAt      DateTime
  updatedAt      DateTime    @updatedAt
  contract       Contract?
  VoteEvent      VoteEvent[]

  @@index([voter])
  @@index([targetContract, targetId, isArchived])
  @@index([targetId, isUpvote])
  @@index([contract, targetId])
  @@map("votes")
}

model Attestation {
  id               Int                @id
  hash             String             @unique
  archived         Boolean
  profileId        Int
  profile          Profile            @relation(fields: [profileId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  createdAt        DateTime
  updatedAt        DateTime           @updatedAt
  account          String
  service          String
  AttestationEvent AttestationEvent[]

  @@index([profileId])
  @@index([account])
  @@map("attestations")
}

model BlockchainEvent {
  id               Int                  @id @default(autoincrement())
  contract         String
  logData          Json                 @db.JsonB
  blockNumber      Int
  blockIndex       Int
  createdAt        DateTime
  updatedAt        DateTime             @updatedAt
  txHash           String               @db.VarChar(66)
  processed        Boolean              @default(false)
  jobCreated       Boolean              @default(false)
  AttestationEvent AttestationEvent[]
  VoteEvent        VoteEvent[]
  ReplyEvent       ReplyEvent[]
  VouchEvent       VouchEvent[]
  ReviewEvent      ReviewEvent[]
  ProfileEvent     ProfileEvent[]
  EscrowEvent      EscrowEvent[]
  MarketEvent      MarketUpdatedEvent[]
  MarketVoteEvent  MarketVoteEvent[]

  @@unique([blockNumber, blockIndex, txHash])
  @@index([contract])
  @@map("blockchain_events")
}

model ProfileEvent {
  eventId   Int
  event     BlockchainEvent   @relation(fields: [eventId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  profileId Int
  profile   Profile           @relation(fields: [profileId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  type      ProfileEventType?

  @@unique([eventId, profileId])
  @@map("profile_events")
}

enum ProfileEventType {
  CREATE   @map("create")
  ARCHIVE  @map("archive")
  RESTORE  @map("restore")
  INVITE   @map("invite")
  UNINVITE @map("uninvite")
}

model ReviewEvent {
  eventId  Int
  event    BlockchainEvent  @relation(fields: [eventId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  reviewId Int
  review   Review           @relation(fields: [reviewId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  type     ReviewEventType?

  @@unique([eventId, reviewId])
  @@map("review_events")
}

enum ReviewEventType {
  CREATE  @map("create")
  EDIT    @map("edit")
  ARCHIVE @map("archive")
  RESTORE @map("restore")
}

model VouchEvent {
  eventId Int
  event   BlockchainEvent @relation(fields: [eventId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  vouchId Int
  vouch   Vouch           @relation(fields: [vouchId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  type    VouchEventType?

  @@unique([eventId, vouchId])
  @@map("vouch_events")
}

enum VouchEventType {
  CREATE    @map("create")
  UNVOUCH   @map("unvouch")
  UNHEALTHY @map("unhealthy")
}

model ReplyEvent {
  eventId Int
  event   BlockchainEvent @relation(fields: [eventId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  replyId Int
  reply   Reply           @relation(fields: [replyId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  type    ReplyEventType?

  @@unique([eventId, replyId])
  @@map("reply_events")
}

enum ReplyEventType {
  CREATE @map("create")
  EDIT   @map("edit")
}

model AttestationEvent {
  eventId       Int
  event         BlockchainEvent       @relation(fields: [eventId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  attestationId Int
  attestation   Attestation           @relation(fields: [attestationId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  type          AttestationEventType?

  @@unique([eventId, attestationId])
  @@map("attestation_events")
}

enum AttestationEventType {
  CREATE  @map("create")
  ARCHIVE @map("archive")
  RESTORE @map("restore")
  CLAIM   @map("claim")
}

model VoteEvent {
  eventId Int
  event   BlockchainEvent @relation(fields: [eventId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  voteId  Int
  vote    Vote            @relation(fields: [voteId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  type    VoteEventType?

  @@unique([eventId, voteId])
  @@map("vote_events")
}

enum VoteEventType {
  CREATE  @map("create")
  ARCHIVE @map("archive")
  UPDATE  @map("update")
}

model ScoreHistory {
  id        Int      @id @default(autoincrement())
  target    String
  score     Int
  createdAt DateTime @default(now())
  elements  Json     @db.JsonB
  errors    String[]
  dirty     Boolean

  @@index([target, dirty])
  @@index([score])
  @@index([createdAt])
  @@index([target, createdAt(sort: Desc)])
  @@map("score_history")
}

model EnsCache {
  id        Int      @id @default(autoincrement())
  address   String   @unique
  ensName   String?
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([address])
  @@index([ensName])
  @@map("ens_cache")
}

model TwitterProfileCache {
  id             String    @id
  username       String
  name           String
  avatar         String?
  biography      String?
  website        String?
  followersCount Int?
  joinedAt       DateTime?
  isBlueVerified Boolean?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([username])
  @@index([updatedAt])
  @@map("twitter_profiles_cache")
}

model AddressHistoryCache {
  address          String   @id @db.Citext //case insensitive
  firstTransaction DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([address, updatedAt])
  @@map("address_history_cache")
}

model TransactionHistoryCache {
  fromAddress      String   @db.Citext //case insensitive
  toAddress        String   @db.Citext
  hash             String   @unique @db.Citext
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  value            String
  blockNumber      Int
  blockTimestamp   DateTime
  fromAddressLabel String?
  fromAddressLogo  String?
  toAddressLabel   String?
  toAddressLogo    String?
  category         String?
  summary          String?

  @@index([updatedAt, fromAddress])
  @@index([updatedAt, toAddress])
  @@index([fromAddress])
  @@index([toAddress])
  @@index([blockNumber])
  @@map("transaction_history_cache")
}

model Escrow {
  id        Int      @id @default(autoincrement())
  profileId Int
  profile   Profile  @relation(fields: [profileId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  token     String
  balance   String
  lifetime  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  EscrowEvent EscrowEvent[]

  @@unique([profileId, token])
  @@map("escrow")
}

model EscrowEvent {
  id        Int             @id @default(autoincrement())
  eventId   Int
  event     BlockchainEvent @relation(fields: [eventId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  profileId Int
  token     String
  amount    String
  createdAt DateTime        @default(now())

  escrow Escrow @relation(fields: [profileId, token], references: [profileId, token])

  @@index([profileId, token])
  @@map("escrow_events")
}

view Activities {
  id              Int
  authorProfileId Int
  subject         String
  eventId         Int
  createdAt       DateTime
  updatedAt       DateTime
  archived        Boolean
  action          String   @map("activity_action")
  type            String   @map("activity_type")
  title           String
  metadata        String
  upvotes         Int
  downvotes       Int
  replies         Int

  @@id([type, id])
  @@map("activities")
}

model Market {
  profileId             Int                  @id
  profile               Profile              @relation(fields: [profileId], references: [id])
  creatorAddress        String               @db.VarChar(42)
  positivePrice         String
  negativePrice         String
  trustVotes            Int
  distrustVotes         Int
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  ReputationMarketEvent MarketUpdatedEvent[]
  MarketVoteEvent       MarketVoteEvent[]

  @@map("markets")
}

model MarketUpdatedEvent {
  eventId            Int
  event              BlockchainEvent @relation(fields: [eventId], references: [id])
  marketProfileId    Int
  market             Market          @relation(fields: [marketProfileId], references: [profileId])
  createdAt          DateTime        @default(now())
  positivePrice      String
  negativePrice      String
  deltaVoteTrust     Int
  deltaVoteDistrust  Int
  deltaPositivePrice String
  deltaNegativePrice String
  blockNumber        Int

  @@unique([eventId, marketProfileId])
  @@index([marketProfileId, createdAt])
  @@map("market_events")
}

enum MarketVoteEventType {
  BUY
  SELL
}

model MarketVoteEvent {
  eventId         Int
  type            MarketVoteEventType
  actorAddress    String              @db.VarChar(42)
  event           BlockchainEvent     @relation(fields: [eventId], references: [id])
  marketProfileId Int
  market          Market              @relation(fields: [marketProfileId], references: [profileId])
  isPositive      Boolean
  amount          Int
  funds           String
  createdAt       DateTime            @default(now())

  @@unique([eventId, marketProfileId])
  @@index([marketProfileId, createdAt])
  @@map("market_vote_events")
}

view TargetView {
  id     Int    @id
  target String

  @@map("targets")
}

view NameView {
  id          Int?
  target      String  @id
  name        String?
  avatar      String?
  username    String?
  description String?

  @@map("names")
}

view ScoreView {
  id     Int?
  target String @id
  score  Int

  @@map("scores")
}
